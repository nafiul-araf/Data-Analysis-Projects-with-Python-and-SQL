# -*- coding: utf-8 -*-
"""Python Exercise-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ocvnA0nmWo6eS7aNn-MRjcp4V9Hqbhqq
"""

# ### Variables
# 1. Create a variable to store your age and print it.
# 2. Store two numbers in variables and display their sum.
# 3. Assign three variables in a single line with values, then print them.
# 4. Create variables for name, age, and city, and display a sentence using them.
# 5. Swap values of two variables using a temporary variable.
# 6. Swap values of two variables without using a temporary variable.
# 7. Use meaningful variable names to represent a person's name, age, and occupation, then display them.

# 1. Create a variable to store your age and print it.

age = 45
print(age)

# 2. Store two numbers in variables and display their sum.
a = 5
b = 9

print(a+b)

# 3. Assign three variables in a single line with values, then print them.

a, b, c = 13, 18, 20

print(a, b, c)

# 4. Create variables for name, age, and city, and display a sentence using them.

name = 'Nafiul'
age = 786
city = 'Dhaka'

print(f"I name is {name}, age is {age} and I'm from {city}")

# 5. Swap values of two variables using a temporary variable.

a = 8
n = 9

k = a

# 6. Swap values of two variables without using a temporary variable.

a = 7
b = 9
a = b

# 7. Use meaningful variable names to represent a person's name, age, and occupation, then display them.

name, age, occupation = 'Nick', 46, 'Engineer'

print(f"He is {name}, he is {age} years old. His is an {occupation}")

# ### Numeric Data Types
# 8. Define an integer, a float, and a complex number and print their types.
# 9. Convert a float to an integer and print both values.
# 10. Round a floating-point number to two decimal places.
# 11. Calculate the remainder when 100 is divided by 7.
# 12. Raise a number to the power of another (e.g., \(5^3\)).
# 13. Find the absolute value of a negative number.
# 14. Use scientific notation to represent a very large or very small number.
# 15. Use Python’s `math` library to find the square root of a number.
# 16. Convert an integer to a complex number and print the result.
# 17. Use `math.pi` to calculate the circumference of a circle with radius 7.

# 8. Define an integer, a float, and a complex number and print their types.

a, b, c = 7, 9.7, 3+2j

print(type(a), type(b), type(c))

# 9. Convert a float to an integer and print both values.

a = 6.89
b=int(a)

a, b

# 10. Round a floating-point number to two decimal places.

a = round(5.4532345, 2)

a

# 11. Calculate the remainder when 100 is divided by 7.

100%7

# 12. Raise a number to the power of another (e.g., \(5^3\)).

5^3

# 13. Find the absolute value of a negative number.

abs(-7)

# 14. Use scientific notation to represent a very large or very small number.

print(f"Large Number: {43629562592652529345629582:.2e}")

print(f"Small Number: {0.00000000000000000000000142:.2e}")

# 15. Use Python’s `math` library to find the square root of a number.

import math
math.sqrt(8)

# 16. Convert an integer to a complex number and print the result.

a = 8
b = complex(a)

print(b)

# 17. Use `math.pi` to calculate the circumference of a circle with radius 7.

#2*pi*r

r = 7

print(f"Circumference of a circle for Radius = 7 is: {round((2 * math.pi * r), 2)}")

# ### Strings
# 18. Create a string variable containing your full name and print it.
# 19. Find the length of a string stored in a variable.
# 20. Concatenate two strings with a space in between.
# 21. Convert a string to all uppercase letters.
# 22. Convert a string to all lowercase letters.
# 23. Replace all occurrences of a character in a string with another character.
# 24. Check if a given substring is in a string.
# 25. Extract the last character from a string.
# 26. Reverse a string using slicing.
# 27. Create a multi-line string and print it.

# 18. Create a string variable containing your full name and print it.

name = "Md. Nafiul Islam"

print(name)

# 19. Find the length of a string stored in a variable.

len(name)

# 20. Concatenate two strings with a space in between.

nick_name = "Araf"

full_name = name + " " + nick_name

print(full_name)

# 21. Convert a string to all uppercase letters.

name.upper()

# 22. Convert a string to all lowercase letters.

name.lower()

# 23. Replace all occurrences of a character in a string with another character.

name.replace("l", "o")

# 24. Check if a given substring is in a string.

if "naf" in name:
  print("Yes")
else:
  print("No")

if "Naf" in name:
  print("Yes")
else:
  print("No")

# 25. Extract the last character from a string.

name[-1]

# 26. Reverse a string using slicing.

name[::-1]

# 27. Create a multi-line string and print it.

mult = """My name is Nafiul,
My age is 7878 and,
My Occupation is X."""
print(mult)

# ### String Slicing
# 28. Extract the first five characters of a string.
# 29. Slice the last three characters of a string.
# 30. Extract a substring from the 2nd to the 6th character of a string.
# 31. Get every alternate character in a string.
# 32. Remove the first character from a string using slicing.
# 33. Extract a substring from the middle of a string.
# 34. Use negative indexing to get the last three characters of a string.
# 35. Create a new string from a given string by skipping every third character.

# 28. Extract the first five characters of a string.
name = "karwanBazar"
name[:5]

# 29. Slice the last three characters of a string.

name[-3:]

# 30. Extract a substring from the 2nd to the 6th character of a string

name[2: 7]

# 31. Get every alternate character in a string.

name[::2]

# 32. Remove the first character from a string using slicing.

name[1:]

# 33. Extract a substring from the middle of a string.

name[3:7]

# 34. Use negative indexing to get the last three characters of a string.

name[-3:]

# 35. Create a new string from a given string by skipping every third character.

name[::3]

# ### Lists
# 36. Create a list of five fruits and print it.
# 37. Access the third item in a list.
# 38. Modify the second item in a list.
# 39. Add a new item to the end of a list.
# 40. Insert an item at the second position in a list.
# 41. Remove the first item from a list.
# 42. Remove an item by value from a list.
# 43. Find the length of a list.
# 44. Check if a certain item is in a list.
# 45. Combine two lists into one.

# 36. Create a list of five fruits and print it.

f = ['apple', 'banana', 'jackfruit', 'mangoo', 'pine-apple']

print(f)

# 37. Access the third item in a list.

f[2]

# 38. Modify the second item in a list.

f[1] = 'grasp'
f

# 39. Add a new item to the end of a list.

f.append('apple')
f

# 40. Insert an item at the second position in a list.

f.insert(1, 'orange')
f

# 41. Remove the first item from a list.

f.pop(0)
f

# 42. Remove an item by value from a list.

f.remove('pine-apple')
f

# 43. Find the length of a list.

len(f)

# 44. Check if a certain item is in a list.

'apple' in f

# 45. Combine two lists into one.

a = ['hjh', 88, 23]
b = [9.90, 3, True]

a+b

# ### List Slicing
# 46. Slice the first three elements of a list.
# 47. Get the last two elements of a list using slicing.
# 48. Extract elements from index 2 to 4 from a list.
# 49. Get every alternate element in a list using slicing.
# 50. Reverse a list using slicing.
# 51. Slice out the middle portion of a list.
# 52. Remove the last element from a list without using any built-in functions.
# 53. Use negative indexing to get the last three elements of a list.
# 54. Create a new list that excludes the first and last elements of an existing list.

# 46. Slice the first three elements of a list.

f[:3]

# 47. Get the last two elements of a list using slicing.

f[-2:]

# 48. Extract elements from index 2 to 4 from a list.

f[2:5]

# 49. Get every alternate element in a list using slicing.

f[::2]

# 50. Reverse a list using slicing.

print(f)

print(f[::-1])

# 51. Slice out the middle portion of a list.

f[2:4]

# 52. Remove the last element from a list without using any built-in functions.

f[:-1]

# 53. Use negative indexing to get the last three elements of a list.

f[-3:]

# 54. Create a new list that excludes the first and last elements of an existing list.

f_new = f[1:-1]
f_new

# ### Sets
# 55. Create a set of five numbers and print it.
# 56. Add a new element to a set.
# 57. Remove an element from a set.
# 58. Check if a value is in a set.
# 59. Combine two sets using union.
# 60. Find the intersection of two sets.
# 61. Find the difference between two sets.
# 62. Convert a list with duplicate items to a set.
# 63. Clear all elements from a set.
# 64. Create a set of five unique colors and print its length.

s = {1, 2, 3, 4, 5}

print(type(s))
print(s)

# 56. Add a new element to a set.
try:
  s[0] = 8
  print(s)
except:
  print("TypeError: 'set' object does not support item assignment")
finally:
  print("Try-catch handled succesfully")

# 57. Remove an element from a set.

s.remove(3)
s

# 58. Check if a value is in a set.

3 in s

# 59. Combine two sets using union.

s1 = {4, 5, 6, 7}
s2 = {1, 3, 5, 7, 0}

s1.union(s2)

# 60. Find the intersection of two sets.

s1.intersection(s2)

# 61. Find the difference between two sets.

s2.difference(s1)

# 62. Convert a list with duplicate items to a set.

l = [2, 4, 5, 5, 8, 2, 8, 1, 2]

s = set(l)

print(l)
print(s)

# 63. Clear all elements from a set.

s.clear()
s

# 64. Create a set of five unique colors and print its length.

s = {'red', 'blue', 'green', 'white', 'orange'}
len(s)

# ### Dictionaries
# 65. Create a dictionary with keys `name`, `age`, and `city`, and print it.
# 66. Access the value of the `name` key in a dictionary.
# 67. Add a new key-value pair to an existing dictionary.
# 68. Update the value of an existing key in a dictionary.
# 69. Remove a key-value pair from a dictionary.
# 70. Check if a specific key exists in a dictionary.
# 71. Get all keys from a dictionary as a list.
# 72. Get all values from a dictionary as a list.
# 73. Merge two dictionaries into one.
# 74. Create a dictionary with default values for five keys.

# 65. Create a dictionary with keys `name`, `age`, and `city`, and print it.

d = {
    'name': 'Nafiul',
    'age': 345,
    'city': 'Dhaka'
}

print(d)

# 66. Access the value of the `name` key in a dictionary.

d['name']

# 67. Add a new key-value pair to an existing dictionary.

d['occupation'] = 'Engineer'
d

# 68. Update the value of an existing key in a dictionary.

d['occupation'] = 'Data Scientist'
d

# 69. Remove a key-value pair from a dictionary.

d.pop('occupation')
d

# 70. Check if a specific key exists in a dictionary.

'age' in d.keys()

# 71. Get all keys from a dictionary as a list.

d.keys()

# 72. Get all values from a dictionary as a list.

d.values()

# 73. Merge two dictionaries into one.

d2 = {'occupation': 'Engineer'}

d.update(d2)

d

# 74. Create a dictionary with default values for five keys.

default_values = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0}

# ### Tuples
# 75. Create a tuple with five different fruits and print it.
# 76. Access the third item in a tuple.
# 77. Attempt to modify the first item in a tuple and observe the error.
# 78. Convert a tuple to a list.
# 79. Find the length of a tuple.
# 80. Concatenate two tuples into one.
# 81. Create a tuple with one item and print its type.
# 82. Unpack the values of a tuple into separate variables.
# 83. Use tuple indexing to get the last item in a tuple.
# 84. Check if a specific item exists in a tuple.

# 75. Create a tuple with five different fruits and print it.

t = ('apple', 'banana', 'jackfruit', 'mangoo', 'pine-apple')
print(t)

# 76. Access the third item in a tuple.

t[2]

# 77. Attempt to modify the first item in a tuple and observe the error.

try:
  t[0] = 'orange'
except:
  print("'tuple' object does not support item assignment")
finally:
  print("Try-catch handled succesfully")

# 78. Convert a tuple to a list.

l = list(t)
l

# 79. Find the length of a tuple.

len(t)

# 80. Concatenate two tuples into one.

t1 = ('orange', 'grasp')

print(t + t1)

# 81. Create a tuple with one item and print its type.

t = (7.8,)

print(type(t))

# 82. Unpack the values of a tuple into separate variables.

print(t1)

o, g = t1

print(o)
print(g)

# 83. Use tuple indexing to get the last item in a tuple.

t1[-1]

# 84. Check if a specific item exists in a tuple.

'apple' in t1

# ### Type Casting
# 85. Convert an integer to a float and print both values.
# 86. Convert a float to a string and print both values.
# 87. Convert a string representing a number to an integer.
# 88. Convert a list to a tuple and print both types.
# 89. Convert a tuple to a list and print both types.
# 90. Convert a dictionary’s keys to a list.
# 91. Convert a dictionary’s values to a list.
# 92. Create a set from a string and print the result.
# 93. Use `int()` to convert a float with decimal places and note the result.
# 94. Convert a number to a string, concatenate it with another string, and print the result.

# 85. Convert an integer to a float and print both values.

a = 6
b = float(a)

print(a, b)

# 86. Convert a float to a string and print both values.

c = str(b)

print(b, c)

type(b), type(c)

# 87. Convert a string representing a number to an integer.

d = int(float(c))
d, type(d)

# 88. Convert a list to a tuple and print both types.

l = [6,7 ,8, 8]

t = tuple(l)

print(type(l), type(t))

# 89. Convert a tuple to a list and print both types.

l = list(t)

print(type(t), type(l))

# 90. Convert a dictionary’s keys to a list.

d = {
    'name': 'Nafiul',
    'age': 345,
    'city': 'Dhaka'
}

l = list(d.keys())
l

# 91. Convert a dictionary’s values to a list.

l = list(d.values())

l

# 92. Create a set from a string and print the result.

s = 'dgtd'
se = set(s)
print(se)

# 93. Use `int()` to convert a float with decimal places and note the result.

f = 56.98
i = int(56)

i

# 94. Convert a number to a string, concatenate it with another string, and print the result.

s = str(i)
s = s + '.98'

print(s)

# ### Operators
# 95. Use the addition operator to add two numbers.
# 96. Use the subtraction operator to subtract one number from another.
# 97. Use the multiplication operator to multiply two numbers.
# 98. Divide two numbers using the division operator and print the result.
# 99. Use the modulus operator to find the remainder of a division.
# 100. Calculate the floor division of two numbers.

# 95. Use the addition operator to add two numbers.

7 + 9

# 96. Use the subtraction operator to subtract one number from another.

89 - 24

# 97. Use the multiplication operator to multiply two numbers.

45 * 6

print(323 / 50)

# 99. Use the modulus operator to find the remainder of a division.

323 % 50

# 100. Calculate the floor division of two numbers.

323 // 50

