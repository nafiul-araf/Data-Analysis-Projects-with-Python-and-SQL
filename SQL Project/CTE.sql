/*
Problem Statement: We have two tables: "MovieFinancials" containing budget and revenue data for movies, and "Movies" containing movie details
including IMDb ratings. Our task is to find movies that generated over 500% profit despite having a rating lower than the average rating of all
movies.
*/
with cte1 as
(
  select movie_id, ((revenue - budget)/budget)*100 as profit_pct
  from financials
),

cte2 as
(
  select movie_id, imdb_rating from movies
  where imdb_rating < (select avg(imdb_rating) from movies)
),

cte3 as
(
  select c1.movie_id, m.title, c2.imdb_rating, c1.profit_pct 
  from cte1 as c1
  join movies as m
  on c1.movie_id = m.movie_id
  join cte2 as c2
  on c1.movie_id = c2.movie_id
  where c1.profit_pct > 500
)

select * from cte3;


-- another way


with cte1 as
(
  select movie_id, ((revenue - budget)/budget)*100 as profit_pct
  from financials
),

cte2 as
(
  select movie_id, title, imdb_rating from movies
  where imdb_rating < (select avg(imdb_rating) from movies)
),

cte3 as
(
  select c1.movie_id, c2.title, c2.imdb_rating, c1.profit_pct 
  from cte1 as c1
  join cte2 as c2
  on c1.movie_id = c2.movie_id
  where c1.profit_pct > 500
)

select * from cte3;



/* 
Lecture Solution
WITH ProfitableMovies AS (
SELECT
movie_id,
(revenue - budget) * 100.0 / budget AS profit_percentage
FROM financials
WHERE (revenue - budget) * 100.0 / budget >= 500
),
BelowAverageRatedMovies AS (
SELECT movie_id
FROM movies
WHERE imdb_rating < (SELECT AVG(imdb_rating) FROM movies)
)
SELECT
pm.movie_id,
pm.profit_percentage,
m.title,
m.imdb_rating
FROM ProfitableMovies pm
JOIN BelowAverageRatedMovies barm ON pm.movie_id = barm.movie_id
JOIN movies m ON pm.movie_id = m.movie_id;
*/ 

/*
Problem 1: Unveiling High-Rated Actors
Challenge: Identify actors who have consistently delivered stellar performances. List actors who have an average IMDb rating of 7.5 or higher
across all their movies.
*/
with cte1 as
(
  select a.name, avg(m.imdb_rating) as avg_rating from movies as m
  join movie_actor as ma
  on m.movie_id = ma.movie_id
  join actors as a
  on ma.actor_id = a.actor_id
  group by a.name
),

cte2 as
(
  select name from cte1
  where avg_rating >= 7.5
)

select * from cte2;

/*
Lecture Solution
WITH ActorAverageRatings AS (
SELECT
ma.actor_id,
AVG(m.imdb_rating) AS average_rating
FROM movie_actor ma
JOIN movies m ON ma.movie_id = m.movie_id
GROUP BY ma.actor_id
)
SELECT
a.name
FROM actors a
JOIN ActorAverageRatings aar ON a.actor_id = aar.actor_id
WHERE aar.average_rating >= 7.5;
*/

/*
Problem 2: Bollywood's Box Office Champions
Challenge: The Indian film industry, "Bollywood," is known for its blockbuster hits. Find Bollywood movies released after 2010 that have grossed
over 10 Billion INR.
*/

-- industry Bollywood
-- released after 2010
-- revenue 10 billions
with cte1 as (
select movie_id, 
       case
           when unit = 'Millions' then revenue*0.001
           when unit = 'Thousands' then revenue*0.000001
           else revenue
	   end as revenue_billions, currency
from financials)

select m.title from cte1 as c1
join movies as m
on c1.movie_id = m.movie_id
where m.industry = 'Bollywood'
  and m.release_year > 2010 
  and c1.currency = 'INR' 
  and c1.revenue_billions > 10;
  
  
/*
Lecture Solution (didnot convert to millon and thousands to billion)
WITH HighGrossingBollywoodMovies AS (
SELECT
m.title,
f.revenue
FROM movies m
JOIN financials f ON m.movie_id = f.movie_id
WHERE m.industry = 'Bollywood'
AND m.release_year > 2010
AND f.currency = 'INR'
AND f.revenue > 10
)
SELECT * FROM HighGrossingBollywoodMovies;
*/

/*
Problem 3: Profit Kings: Actors with the Highest Profit Margins
Challenge: Profitability is key in the movie business. Identify the actors who have consistently delivered high profit margins. List actors with an
average profit margin (revenue - budget) of over 100 million USD across all their movies.
*/

with cte1 as
(
select a.actor_id, avg(f.revenue - f.budget) as avg_profit_margin
from actors a
join movie_actor ma on a.actor_id = ma.actor_id
join financials f on ma.movie_id = f.movie_id
where f.currency = 'USD'
group by a.actor_id
)
select name from actors a
join cte1 as c1 on a.actor_id = c1.actor_id
where c1.avg_profit_margin > 100;

/*
Problem 4: Analyzing Hollywood's Global Reach
Challenge: Hollywood's influence extends worldwide. Determine the total revenue generated by Hollywood movies for each language since 2015.
*/

-- total rev for hollywods since 2015
-- group by language

with cte1 as
(
   select m.movie_id, m.language_id, sum(f.revenue) as total_revenue from movies as m
   join financials as f
   on m.movie_id = f.movie_id
   where m.release_year >= 2015 and m.industry = 'Hollywood'
   group by m.movie_id, m.language_id
)

select l.name, sum(c1.total_revenue) as total_revenue from languages as l
join cte1 as c1
on l.language_id = c1.language_id
group by l.name;

/*
Lecture Solution
WITH HollywoodRevenueByLanguage AS (
SELECT
m.language_id,
SUM(f.revenue) AS total_revenue
FROM movies m
JOIN financials f ON m.movie_id = f.movie_id
WHERE m.industry = 'Hollywood'
AND m.release_year >= 2015
GROUP BY m.language_id
)
SELECT
l.name,
h.total_revenue
FROM HollywoodRevenueByLanguage h
JOIN languages l ON h.language_id = l.language_id
ORDER BY h.total_revenue DESC;
*/


/*
Problem 5: Collaborations: Finding Actors Who Shared the Screen with Chris Hemsworth
Challenge: In the world of cinema, collaborations are key. Identify all actors who have starred alongside the renowned actor Chris Hemsworth.
*/

-- identify all movie id Chris Hemsworth acted
-- unique co-actors who acted with Chris Hemsworth
-- find the actors

with cte1 as
(
  select ma.movie_id from movie_actor as ma
  join actors as a
  on ma.actor_id = a.actor_id
  where a.name = 'Chris Hemsworth'
),

cte2 as
(
  select distinct ma.actor_id from movie_actor as ma
  join cte1 as c1
  on ma.movie_id = c1.movie_id
  where ma.actor_id not in (select actor_id from actors where name = 'Chris Hemsworth')
)

select a.name from actors as a
join cte2 as c2
on a.actor_id = c2.actor_id;

/*
Lecture Solution
WITH ChrisHemsworthMovies AS (
SELECT
ma.movie_id
FROM actors a
JOIN movie_actor ma ON a.actor_id = ma.actor_id
WHERE a.name = 'Chris Hemsworth'
),
CoActors AS (
SELECT DISTINCT
ma.actor_id
FROM movie_actor ma
JOIN ChrisHemsworthMovies chm ON ma.movie_id = chm.movie_id
WHERE ma.actor_id != (SELECT actor_id FROM actors WHERE name = 'Chris Hemsworth')
)
SELECT
a.name
FROM actors a
JOIN CoActors ca ON a.actor_id = ca.actor_id;
*/